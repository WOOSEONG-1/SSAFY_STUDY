*** B형 : 3. 16
*** A형 : 3. 4
** 24. 01. 29 ~ 24 . 02. 02 ( 4주차 )
1. DP or 탐색	-> 6 / 5
2. Dijkstra 		->	0 / 5
3. Greedy		-> 0 / 5
4. Bitmasking 	-> 3 / 5
** 예 정 **
1. Segment Tree
2. Two-Pointer
3. MST
----------------------------------------------------------------------------------------

* 수업 노트 ( 1. 17 ( 수) )
	** 함수와 조건문 I
		-	'외장함수'라는 단어는 없음
		- """ 주석은 함수 내에서 documnet string (docstring) 이라 불림 : 함수의 가이드 역할 / 사용 자제
		- 매개변수 : 함수를 정의할 때 함수가 받을 값, 인자 : 함수를 호출할 때 대입하는 값
		- 위치 > 기본 > 가변 > 가변 키워드가 권장
		- lambda : 익명 함수, 한 줄로 함수를 표현
----------------------------------------------------------------------------------------
* 수업 노트 ( 1. 18 ( 목) )
	** 함수와 조건문 II
		- from math import sqrt	 \n from my_math import sqrt 라면 마지막으로 import된 것으로 overwrite

----------------------------------------------------------------------------------------
* 수업 노트 ( 1. 19 ( 금 ) )
	** 금융 데이터를 활용한 금융 상품 비교 애플리케이션
		- 가장 hot한 상품들, 신규 상품들 게재
		- 금융상품통합비교 공시 API
	** 	open api와 외부 데이터를 활용한 영화 추천 서비스
		-
	- 인터넷에 있는 날씨 정보를 가져와, 내가 원하는 정보만 출력
	- OpenWeatherMap API
	- 도전 과제 : gitlab에 제출
	- 파이썬으로 정기 예금 데이터 수집 및 미션 수행
	- 외부 서버를 활용한 데이터 수집
	- 요구 사항에 맞게 데이터 가공
----------------------------------------------------------------------------------------
* 수업 노트 ( 1. 23 ( 화 ) )
	- 해시 함수 : 정수형은 정수 그대로의 hash 값을 가진다.
	- 문자열은 항상 다르다.
	
* 알고리즘
	- 조합(Combination) 구현 ( n C r )
	comb( int[] arr, boolean[] brr, int k, int n, int r )
	if ( r == 0 ) print(arr, brr, n )
	for ( i = k ; i < n ; i++ ) {
		brr[k] = true
		comb(arr,brr,i+1, n, r-1)
		brr[k] = false
	}

----------------------------------------------------------------------------------------
* 수업 노트 ( 1. 24 ( 수 ) )
	- 클래스로 만든 객체 : 인스턴스
	Ex) 클래스(가수) - 인스턴스(아이유) => 클래스와 인스턴스 = 객체
	- 클래스의 앞 문자는 대문자 -> Paskal Case <-> Snake Case(소문자 = 함수)
----------------------------------------------------------------------------------------
* 수업 노트 ( 2. 1 ( 목 ) )
	- 자료구조 : 배열
		- 접근 : O(1)
		- 탐색 : O(n)
		- 삽입 : O(1), O(n)(사이에 추가할 때)
		- 삭제 : O(1), O(n)(사이를 제거할 때)

* 수업 노트 (2. 2 ( 금 ) )
	- LCS ( 최장 공통 수열 )
	
		** 도출 Code
		if ( i == j ) 	dp[i][j] = dp[i-1][j-1] + 1
		else			dp[i][j] = Max( dp[i][j-1], d[i-1][j] )
		
		** 출력 Code
		while ( i > 0 && j > 0 )
			if ( s1[i] == s2[j] ) 
				append(s1)
				i--;	j--;
			else if ( dp[i-1][j] > dp[i][j-1] )
				i--;
			else 	
				j--;
			
Q?
	- 알고리즘( ~~기간, 어떤?, 코딩 환경 스레드 ( 단일, 멀티 )
	- 함수의 인자는 어떤 것을 주는게 좋은지 ( 판단 기준 )
		Ex) 배열 탐색 큐 BFS : static Queue, n, m, 
	- 
	
import sys
sys.stdin = open('C:/temp/input.txt', 'r')
dy = [1, -1, 0, 0, 1, -1]
dx = [0, 0, 1, -1, 1, -1]
def check(y, x, c):
    flag = 0
    if c == 1:
        r_c = 2
    else:
        r_c = 1
    for k in range(6):
        ny, nx = y, x
        while True:
            ny += dy[k]
            nx += dx[k]
            if 0 <= ny <= n and 0 <= nx <= n :
                if B[ny][nx] == r_c:
                    flag = 1
                if flag == 1 and B[ny][nx] == c:
                    flag = 0
            else:
                break
        ny, nx = y, x
        while True:
            ny += dy[k]
            nx += dx[k]
            if 0 <= ny <= n and 0 <= nx <= n:
                if B[ny][nx] == r_c:
                    B[ny][nx] = c
            else:
                break

for t in range(1, int(input())+1):
    n, m = map(int, input().split())
    B = [[0] * (n+1) for _ in range(n+1)]
    mid = n//2
    B[mid][mid], B[mid][mid+1], B[mid+1][mid], B[mid+1][mid+1] = 2, 1, 1, 2
    for i in range(m):
        ex, ey, ec = map(int, input().split())
        B[ey][ex] = ec
        check(ey, ex, ec)
    cnt = 0
    for i in B:
        for j in i :
            if j == 1:
                cnt += 1
            print(j, end = ' ')
        print()
    print(f'#{t} {cnt} {n*n-cnt}')